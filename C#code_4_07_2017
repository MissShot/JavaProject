#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;


#endregion

namespace ST_2f63d27c3d28476cb1132e30d5f4f688
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        List<string> DataLastName = new List<String>();//All list
        List<String> UID_suffix = new List<string>();
        List<String> Thislist = new List<string>();//list
        List<String> DataEMPID = new List<String>();
        List<String> listEMPID = new List<string>();
        List<String> listENGNAME = new List<string>();
        List<String> listDupName = new List<String>();
        List<String> listDataLastName = new List<String>();
        List<String> NewlistDataLastName = new List<String>();
        List<String> ThislistDataLastName=new List<String>();
        int i, n, x, y,z = 0;
        int node_index;
        int n_digit;
        int DigiIndex = 0;
        int count = 0;
        int digi = 3;
        String strConnString;
        SqlConnection objConn;
        Boolean NameDuplicate = false;

        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
		{
            // TODO: Add your code here
            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);




            //edit
            objConn.Open();


            if (objConn.State == ConnectionState.Open)
            {
                Console.WriteLine("SQL Server Connected", "Message Connecing to Database");

            }
            else
            {
                Console.WriteLine("SQL Server Connect Failed", "Message Connecing to Database");

            }
            /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
            string ThisquerySql = "select * from ComputeData;"; //query        



            var ThisCommand = new SqlCommand(ThisquerySql, objConn);

            SqlDataReader reader = ThisCommand.ExecuteReader();


            try
            {

                if (reader.HasRows)
                {
                    // Get data from DB to Reader
                    while (reader.Read())
                    {
                        String QurryOutPutName = reader.GetString(reader.GetOrdinal("ENGNAME"));
                        String QurryOutPutSubname = reader.GetString(reader.GetOrdinal("ENGSURNAME")); //get data from field
                        String QurryOutPutEMPID = reader.GetString(reader.GetOrdinal("EMPLOYEEID"));

                        DataLastName.Add(QurryOutPutSubname); // เอาข้อมูลในitemไปแอด ในrawdata วนloop addจนครบ
                        listEMPID.Add(QurryOutPutEMPID);
                        listENGNAME.Add(QurryOutPutName);
                        
                         UpdateCommend(listENGNAME[n], DataLastName[n].Substring(0,3), listEMPID[n]);// update 
                        
                        n++;

                       
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            objConn.Close();

            for (int i=0;i<n ;i++) { //Get data  for check 3 digi duplicate------ (1)
                ThislistDataLastName.Add(DataLastName[i].Substring(0, 3));
            }

           
            
            //check name Duplicate---------------------------------------------------------------

            try
            {
                for (x = 0; x < n; x++)
                {
                    for (y = 0; y < n; y++)
                    {
                        if (x != y && (listENGNAME[x]).Equals(listENGNAME[y]))
                        {
                             //check ENGNAME Duplicate


                            //ให้เช็คSubname เฉพาะ index ที่ x กับ index ที่ y

                           
                            ////////////////////////////////////////////////
                            /// check DataLastName Duplicate (lastname)
                            NameDuplicate = false;//-------for check data befor update commend
                            digi = 3; // set digi =3 
                            z = 0;
                              do
                            { // check digi(values) DataLastName[x] & DataLastName[y]
                                if (x != y && (ThislistDataLastName[x]).Equals(ThislistDataLastName[y])) //check digi dulicate----- (1)
                                {

                                   
                                    digi++; //digi + 
                                    int CountLetterX = DataLastName[x].Count(Char.IsLetter);
                                    int CountLetterY = DataLastName[y].Count(Char.IsLetter);

                                    if ((digi<=CountLetterX)&&(digi<=CountLetterY)) {
                                        if (x != y && (DataLastName[x].Substring(0, digi)).Equals(DataLastName[y].Substring(0, digi))) //check if x(digi)=y(digi)
                                        {

                                        }
                                        else
                                        {//check if x(digi)!=y(digi)
                                         //it mene don't have duplicate in lastname(CutDIGI)
                                            NameDuplicate = true; //set true
                                            NewlistDataLastName.Add(DataLastName[x].Substring(0, digi));
                                            //  NewlistDataLastName.Add(DataLastName[y].Substring(0, digi));

                                        }//end if x&y substring
                                    } else if ((digi> CountLetterX)||(digi> CountLetterY)) {

                                        if ((CountLetterX<digi)&&(CountLetterY>digi)) {

                                            UpdateCommend(listENGNAME[x], DataLastName[x].Substring(0, digi-1), listEMPID[x]);
                                            UpdateCommend(listENGNAME[y], DataLastName[y].Substring(0, digi), listEMPID[y]);
                                            break;

                                        }
                                        else {
                                            UpdateCommend(listENGNAME[y], DataLastName[y].Substring(0, digi - 1), listEMPID[y]);
                                            UpdateCommend(listENGNAME[x], DataLastName[x].Substring(0, digi), listEMPID[x]);
                                            break;
                                        }//end else

                                    }//end else if


                                } //end if check duplicate (1)
                            } while (x != y && (DataLastName[x].Substring(0, digi)).Equals(DataLastName[y].Substring(0, digi)));

                            if (NameDuplicate == true) {
                                UpdateCommend(listENGNAME[x], DataLastName[x].Substring(0, digi), listEMPID[x]);
                               // UpdateCommend(listENGNAME[y], DataLastName[y].Substring(0, digi), listEMPID[y]);
                            }
                        }// end if check listENGNAME


                    }

                }
            } catch (Exception ex) {
                MessageBox.Show(ex.Message);
            }

            Dts.TaskResult = (int)ScriptResults.Success;
        }

       


        //star update
        void UpdateCommend(String listENGNAME, String UID_suffix, String listEMPID)
        {

            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);

            String QurryUpdate = "update ComputeData set UID = '" + listENGNAME + "." + UID_suffix + "', Subname = '" + UID_suffix + "',Email ='" + listENGNAME + "." + UID_suffix + "@Kiatnakin.co.th" + "'  where EMPLOYEEID = '" + listEMPID + "';";
            SqlCommand UpdateCommand = new SqlCommand(QurryUpdate, objConn);

            try
            {
                objConn.Open();
                UpdateCommand.ExecuteNonQuery();
                //MessageBox.Show("Update Success");
                objConn.Close();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }//end function Update


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}
