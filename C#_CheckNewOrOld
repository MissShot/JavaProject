
#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Data.SqlClient;//connect to database
using System.Windows.Forms;
using System.Collections.Generic;
#endregion

namespace ST_7bd39d5130a24fb0a641869d4f6b8368
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        int a,n,m = 0;
        String strConnString;
        SqlConnection objConn;
        string Status = "Create";
        List<String> listEMPID = new List<string>();
        List<String> listENGNAME = new List<string>();
        List<String> listLastName = new List<String>();
        List<String> listEMPID_old = new List<string>();
        List<String> listENGNAME_old= new List<string>();
        List<String> listLastName_old = new List<String>();
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {


            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);


            //edit
            objConn.Open();


            if (objConn.State == ConnectionState.Open)
            {
                Console.WriteLine("SQL Server Connected", "Message Connecing to Database");

            }
            else
            {
                Console.WriteLine("SQL Server Connect Failed", "Message Connecing to Database");

            }
            /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
            string SqlRawdata = "select * from Rawdata order by EMPLOYEEID;"; //query        



            var SelectCommand = new SqlCommand(SqlRawdata, objConn);

            SqlDataReader reader = SelectCommand.ExecuteReader();


            try
            {

                if (reader.HasRows)
                {
                    // Get data from DB to Reader
                    while (reader.Read())
                    {
                        String QurryOutPutEMPID = reader.GetString(reader.GetOrdinal("EMPLOYEEID")); //get data EMP ID
                        String QurryOutPutName = reader.GetString(reader.GetOrdinal("ENGNAME"));
                        String QurryOutPutSubname = reader.GetString(reader.GetOrdinal("ENGSURNAME")); //get data from field
                        listEMPID.Add(QurryOutPutEMPID);
                        listENGNAME.Add(QurryOutPutName);
                        listLastName.Add(QurryOutPutSubname);
                        UpdateCommend(Status, listEMPID[n]);
                        n++;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            objConn.Close();

            objConn.Open();
            string SqlDataExport = "select * from DataExport order by EMPLOYEEID;"; //query        
            var CheckCommand = new SqlCommand(SqlDataExport, objConn);
            SqlDataReader reader2 = CheckCommand.ExecuteReader();


            try
            {

                if (reader2.HasRows)
                {
                    // Get data from DB to Reader
                    while (reader2.Read())
                    {
                        String QurryOutPutEMPID_Old = reader2.GetString(reader2.GetOrdinal("EMPLOYEEID")); //get data EMP ID
                        String QurryOutPutName_Old = reader2.GetString(reader2.GetOrdinal("ENGNAME"));
                        String QurryOutPutSubname_Old = reader2.GetString(reader2.GetOrdinal("ENGSURNAME")); //get data from field
                        listEMPID_old.Add(QurryOutPutEMPID_Old);
                        listENGNAME_old.Add(QurryOutPutName_Old);
                        listLastName_old.Add(QurryOutPutSubname_Old);
                        m++;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            objConn.Close();

            for (int i=0;i<listEMPID.Count ;i++) { 

                for (int j=0;j< listEMPID_old.Count; j++) {

                    if ((i== listEMPID.Count) ||(i> listEMPID.Count)) {
                        break;
                    }
                    else {

                        if (listEMPID[i] == listEMPID_old[j])
                        {
                            if (listENGNAME[i] == listENGNAME_old[j])
                            {
                                if (listLastName[i] == listLastName_old[j])
                                {
                                    Status = "Modify";
                                    UpdateCommend(Status, listEMPID[i]);

                                }

                            }

                        }
                        else
                        {
                           
                           

                        }

                    }//end else i== 
                }     //end for y           
            } //end for x




            // TODO: Add your code here

            Dts.TaskResult = (int)ScriptResults.Success;
		}


        void UpdateCommend(String Status,  String listEMPID)
        {

            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);

            String QurryUpdate = "update Rawdata set SStatus = '"+Status+"' where EMPLOYEEID like '"+ listEMPID + "';";
            SqlCommand UpdateCommand = new SqlCommand(QurryUpdate, objConn);

            try
            {
                objConn.Open();
                UpdateCommand.ExecuteNonQuery();
                //MessageBox.Show("Update Success");
                objConn.Close();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #region ScriptResults declaration
            /// <summary>
            /// This enum provides a convenient shorthand within the scope of this class for setting the
            /// result of the script.
            /// 
            /// This code was generated automatically.
            /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}
