#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Data.SqlClient;
#endregion

namespace ST_51f9dbba1aeb402cb9163eb4cdd7d02c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        List<string> DataLastName = new List<String>();//All list
        List<String> UID_suffix = new List<string>();
        List<String> Thislist = new List<string>();//list
        List<String> DataEMPID = new List<String>();
        List<String> listEMPID = new List<string>();
        List<String> listENGNAME = new List<string>();
        int n,x,y = 0;
        int Size;
        int Sizenode;
        int node_index;
        int n_digit;
        int DigiIndex = 0;
        int count = 0;
        String strConnString;
        SqlConnection objConn;
        Boolean NameDuplicate = false;

        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);




            //edit
            objConn.Open();


            if (objConn.State == ConnectionState.Open)
            {
                Console.WriteLine("SQL Server Connected", "Message Connecing to Database");

            }
            else
            {
                Console.WriteLine("SQL Server Connect Failed", "Message Connecing to Database");

            }
            /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
            string ThisquerySql = "select * from ComputeData;"; //query        
            
            

            var ThisCommand = new SqlCommand(ThisquerySql, objConn);

            SqlDataReader reader = ThisCommand.ExecuteReader();


            try
            {

                if (reader.HasRows)
                {
                    // Get data from DB to Reader
                    while (reader.Read())
                    {
                        String QurryOutPutName = reader.GetString(reader.GetOrdinal("ENGNAME"));
                        String QurryOutPutSubname = reader.GetString(reader.GetOrdinal("ENGSURNAME")); //get data from field
                        String QurryOutPutEMPID = reader.GetString(reader.GetOrdinal("EMPLOYEEID"));

                        DataLastName.Add(QurryOutPutSubname); // เอาข้อมูลในitemไปแอด ในrawdata วนloop addจนครบ
                        listEMPID.Add(QurryOutPutEMPID);
                        listENGNAME.Add(QurryOutPutName);


                        MessageBox.Show("Row "+n+" is Data : "+ DataLastName[n]);
                     //   MessageBox.Show("Row " + n + " is Data : " + listENGNAME[n]);
                        n++;



                    }
                }
            }
            finally {

            }
            objConn.Close();
            //check name dlipicat
      
            for (x = 0; x < n; x++)
            {
                for (y = 0; y < n; y++)
                {
                    if (x != y && (listENGNAME[x]).Equals(listENGNAME[y]))
                    {
                        NameDuplicate = true; //check ENGNAME Duplicate


                        //ให้เช็คSubname เฉพาะ index ที่ x กับ index ที่ y

                        MessageBox.Show("index   " + x + "   Duplicate index   " + y);
                    }
                   

                }

            }



           // if (NameDuplicate == true) { //Start  NameDuplicate 
                while (DataLastName.Count > 0)
                {
                    for (int i = 0; i < DataLastName.Count; i++)
                    {
                        if (!IsDigiDuplicate(DigiIndex, i, DataLastName, ref node_index))
                        {
                            int n_digit;
                            if (DigiIndex < 3)
                            {
                                n_digit = 3;
                            } //end if DigiIndex
                            else
                            {
                                n_digit = DigiIndex;
                            } //end else(if DifiIndex)


                       
                     
                        UID_suffix.Add(DataLastName[node_index].ToString().Substring(0, n_digit));
                        MessageBox.Show("Data In UID list " + i + "  =  " + UID_suffix[i].ToString());
                        DataLastName.RemoveAt(node_index);
                      
                        
                           


                        } //if !IsDuplicate

                    } // end for

                    DigiIndex++;
                } //End while check count

            //    }//// End if(NameDuplicate)
            listENGNAME[0] = "do";
            UID_suffix[0] =  "lu";
            listEMPID[0] = "110247";

           /* for (int i=0;i<n ;i++) {//วน update ตาม size list data
                UpdateCommend(listENGNAME[0], UID_suffix[i], listEMPID[i]);
            }//end for 
          */
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        // Boolean
        Boolean IsDigiDuplicate( int Digi_index, int node_refixIndex, List<String> Thislist, ref int node_index)
        {
           
       
            for (int i = 0; i < (Thislist.Count) && (i != node_refixIndex); i++)
            {
              /// MessageBox.Show("Thislist(node_refix)[" + node_refixIndex + "] = " + Thislist[node_refixIndex].ToString().Substring(Digi_index, 1));
             ///  MessageBox.Show("Thislist(i)[" + i + "] = " + Thislist[i].ToString().Substring(Digi_index, 1));
                if (Thislist[node_refixIndex].ToString().Substring(Digi_index, 1) == Thislist[i].ToString().Substring(Digi_index, 1)) {
                    return true;
                }
            }
            return false;
        }// end Boolean


        //star update
       void  UpdateCommend(String listENGNAME, String UID_suffix, String listEMPID) {

            strConnString = @"Data Source =TOKUDOLU\SQLEXPRESS; Initial Catalog =ThisDB; User ID = sa; Password = 0840449287";
            objConn = new SqlConnection(strConnString);

            String QurryUpdate = "update ComputeData set UID = '"+listENGNAME+"."+UID_suffix+"', Subname = '"+UID_suffix + "' where EMPLOYEEID = '" + listEMPID + "';";
            SqlCommand UpdateCommand = new SqlCommand(QurryUpdate, objConn);

            try
            {
                objConn.Open();
                UpdateCommand.ExecuteNonQuery();
                MessageBox.Show("Update Success");
                objConn.Close();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }//end function Update

     

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}
